@page "/weather"
@inject IJSRuntime JSRuntime

<h1>Dynamic Weather</h1>

<p>See the weather and watch the background change!</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="text-align:center;">
        <h2>@currentForecast.Summary</h2>
        <p>@currentForecast.Date.ToShortDateString()</p>
        <p>Temperature: @currentForecast.TemperatureC °C / @currentForecast.TemperatureF °F</p>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast? currentForecast;

    protected override async Task OnInitializedAsync()
    {
        // Starte mit aktuellen Wetterdaten
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        forecasts = new[]
        {
            new WeatherForecast { Date = startDate, TemperatureC = 30, Summary = "Sonnig" },
            new WeatherForecast { Date = startDate.AddDays(1), TemperatureC = 20, Summary = "Wolkig" },
            new WeatherForecast { Date = startDate.AddDays(2), TemperatureC = 15, Summary = "Regen" },
            new WeatherForecast { Date = startDate.AddDays(3), TemperatureC = 5, Summary = "Schnee" },
            new WeatherForecast { Date = startDate.AddDays(4), TemperatureC = 10, Summary = "Gewitter" }
        };

        currentForecast = forecasts.First();

        // Aktualisiere Hintergrund basierend auf Wetterdaten
        await UpdateBackground(currentForecast);
    }

    private async Task UpdateBackground(WeatherForecast forecast)
    {
        string backgroundStyle;

        // Setze Hintergrundbild basierend auf der Wetterlage
        switch (forecast.Summary)
        {
            case "Sonnig":
                backgroundStyle = "url('images/sunny.svg')";
                break;
            case "Wolkig":
                backgroundStyle = "url('images/cloudy.svg')";
                break;
            case "Regen":
                backgroundStyle = "url('images/rainy.svg')";
                break;
            case "Schnee":
                backgroundStyle = "url('images/snowy.svg')";
                break;
            case "Gewitter":
                backgroundStyle = "url('images/stormy.svg')";
                break;
            default:
                backgroundStyle = "url('images/default.svg')";
                break;
        }

        // Wende den Hintergrund an
        await JSRuntime.InvokeVoidAsync("eval", $"document.body.style.backgroundImage = \"{backgroundStyle}\";");
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
